package com.eyeronic.edt.objects.blocks;

public class BlockDynamicTorch extends BlockBase implements ITileEntityProvider {
	protected static final AxisAlignedBB STANDING_AABB = new AxisAlignedBB(0.4000000059604645D, 0.0D, 0.4000000059604645D, 0.6000000238418579D, 0.6000000238418579D, 0.6000000238418579D);
    protected static final AxisAlignedBB TORCH_NORTH_AABB = new AxisAlignedBB(0.3499999940395355D, 0.20000000298023224D, 0.699999988079071D, 0.6499999761581421D, 0.800000011920929D, 1.0D);
    protected static final AxisAlignedBB TORCH_SOUTH_AABB = new AxisAlignedBB(0.3499999940395355D, 0.20000000298023224D, 0.0D, 0.6499999761581421D, 0.800000011920929D, 0.30000001192092896D);
    protected static final AxisAlignedBB TORCH_WEST_AABB = new AxisAlignedBB(0.699999988079071D, 0.20000000298023224D, 0.3499999940395355D, 1.0D, 0.800000011920929D, 0.6499999761581421D);
    protected static final AxisAlignedBB TORCH_EAST_AABB = new AxisAlignedBB(0.0D, 0.20000000298023224D, 0.3499999940395355D, 0.30000001192092896D, 0.800000011920929D, 0.6499999761581421D);
    protected static final AxisAlignedBB TORCH_NORTH_EAST_AABB = new AxisAlignedBB(0.0D, 0.20000000298023224D, 0.6499999761581421D, 0.3499999940395355D, 0.800000011920929D, 1.0D);
    protected static final AxisAlignedBB TORCH_NORTH_WEST_AABB = new AxisAlignedBB(0.6499999761581421D, 0.20000000298023224D, 0.6499999761581421D, 1.0D, 0.800000011920929D, 1.0D);
    protected static final AxisAlignedBB TORCH_SOUTH_EAST_AABB = new AxisAlignedBB(0.0D, 0.20000000298023224D, 0.0D, 0.3499999940395355D, 0.800000011920929D, 0.3499999940395355D);
    protected static final AxisAlignedBB TORCH_SOUTH_WEST_AABB = new AxisAlignedBB(0.6499999761581421D, 0.20000000298023224D, 0.0D, 1.0D, 0.800000011920929D, 0.3499999940395355D);
	
    public static PropertyEnum FACING;
    public static final PropertyEnum EXTRA_FACING = PropertyExtraDirection.create("facing", new Predicate<ExtraFacing>()
	{
    	public boolean apply(@Nullable ExtraFacing facing)
    	{
    		return facing != ExtraFacing.DOWN;
    	}
	});
    public static final PropertyEnum ENUM_FACING = PropertyDirection.create("facing", new Predicate<EnumFacing>()
    {
        public boolean apply(@Nullable EnumFacing p_apply_1_)
        {
            return p_apply_1_ != EnumFacing.DOWN;
        }
    });
    
    private TileEntityDynamicTorch te;
	
	public BlockDynamicTorch(String name, Material material) {
		super(name, material);
		//super();
		//setUnlocalizedName(name);
		//setRegistryName(name);
		setTickRandomly(true);
		setCreativeTab(CreativeTabs.DECORATIONS);
		setLightLevel(14.0F/15.0F);

		//BlockInit.BLOCKS.add(this);
		//ItemInit.ITEMS.add(new ItemBlock(this).setRegistryName(this.getRegistryName()));
		GameRegistry.registerTileEntity(TileEntityDynamicTorch.class, new ResourceLocation(Reference.MODID, "dynamic_torch"));
		
		if(!ModConfig.dynamicTorchesEnabled)
			setDefaultState(blockState.getBaseState().withProperty(FACING, EnumFacing.UP));
		else
			setDefaultState(blockState.getBaseState().withProperty(FACING, ExtraFacing.UP));
	}
	

	@Override
	public void registerModels() {
		//if(ModConfig.dynamicTorchesEnabled)
			DynamicTorches.proxy.registerItemRenderer(Item.getItemFromBlock(this), 0, "inventory");
	}

	@Override
	public TileEntity createNewTileEntity(World worldIn, int meta) {
		DynamicTorches.log("world set to " + worldIn);
		DynamicTorches.log("meta is " + meta);
		this.te = new TileEntityDynamicTorch();//new TileEntityDynamicTorch(worldIn, meta);
		te.setWorld(worldIn);
		return te;
	}
	
	@Override
	public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos) {
		if(!ModConfig.dynamicTorchesEnabled)
				return getBoundingBoxVanilla(state);
		return getBoundingBoxModded(state);
	}
	
	private AxisAlignedBB getBoundingBoxVanilla(IBlockState state) {
		switch ((EnumFacing)state.getValue(FACING)) {
	        case EAST:
	            return TORCH_EAST_AABB;
	        case WEST:
	            return TORCH_WEST_AABB;
	        case SOUTH:
	            return TORCH_SOUTH_AABB;
	        case NORTH:
	            return TORCH_NORTH_AABB;
	        default:
	        	return STANDING_AABB;
		}
	}
	
	private AxisAlignedBB getBoundingBoxModded(IBlockState state) {
		switch ((ExtraFacing)state.getValue(FACING))
        {
            case EAST:
                return TORCH_EAST_AABB;
            case WEST:
                return TORCH_WEST_AABB;
            case SOUTH:
                return TORCH_SOUTH_AABB;
            case NORTH:
                return TORCH_NORTH_AABB;
            case NORTH_EAST:
            	return TORCH_NORTH_EAST_AABB;
            case NORTH_WEST:
            	return TORCH_NORTH_WEST_AABB;
            case SOUTH_EAST:
            	return TORCH_SOUTH_EAST_AABB;
            case SOUTH_WEST:
            	return TORCH_SOUTH_WEST_AABB;
            default:
                return STANDING_AABB;
        }
	}

    @Override
	@Nullable
    public AxisAlignedBB getCollisionBoundingBox(IBlockState blockState, IBlockAccess worldIn, BlockPos pos)
    {
        return NULL_AABB;
    }
	
	@Override
	public BlockRenderLayer getBlockLayer() {
		return BlockRenderLayer.CUTOUT;
	}

	@Override
	public boolean isOpaqueCube(IBlockState state) {
		return false;
	}
	
	@Override
	public boolean isFullCube(IBlockState state) {
		return false;
	}
	
	@Override
	public boolean isPassable(IBlockAccess worldIn, BlockPos pos) {
		return true;
	}
	
	@Override
	public boolean isTopSolid(IBlockState state) {
		return false;
	}
	
	@Override
	public void neighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos) {
		IBlockState otherState = worldIn.getBlockState(fromPos);
		this.onNeighborChangeInternal(worldIn, fromPos, otherState);
		
		if(!ModConfig.dynamicTorchesEnabled)
			neighborChangedVanilla(state, worldIn, pos, blockIn, fromPos);
		else
			neighborChangedModded(state, worldIn, pos, blockIn, fromPos);
	}
	
	/**
	 * Placeholder in case we need to react to neighbor changes in vanilla mode
	 * @param state
	 * @param worldIn
	 * @param pos
	 * @param blockIn
	 * @param fromPos
	 */
	private void neighborChangedVanilla(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos) {
		
	}

	private void neighborChangedModded(IBlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos) {
		IBlockState otherState = worldIn.getBlockState(fromPos);
		
		ExtraFacing currentFacing = ((ExtraFacing) state.getValue(FACING));
		ArrayList<ExtraFacing> validFacings = getValidExtraFacings(worldIn, pos);
		
		
		if((otherState.getBlock().equals(Blocks.AIR) || blockIn.getBlockState().getBlock().equals(Blocks.AIR))) {		
			if(validFacings.isEmpty() || (validFacings.size() == 1 && ExtraFacing.UP.equals(validFacings.get(0)) && !ModConfig.shouldTorchesSwitchToGround))
				worldIn.destroyBlock(pos, true);
			else if(validFacings.size() == 1)
				worldIn.setBlockState(pos, state.withProperty(FACING, validFacings.get(0)));
			else
				switch(currentFacing) {
					case SOUTH:	
						if(fromPos.equals(pos.west()) && validFacings.contains(ExtraFacing.SOUTH_EAST))
							worldIn.setBlockState(pos, state.withProperty(FACING, ExtraFacing.SOUTH_EAST));
						if(fromPos.equals(pos.east()) && validFacings.contains(ExtraFacing.SOUTH_WEST))
							worldIn.setBlockState(pos, state.withProperty(FACING, ExtraFacing.SOUTH_WEST));
						if(fromPos.equals(pos.north()) && validFacings.contains(ExtraFacing.WEST))
							worldIn.setBlockState(pos, state.withProperty(FACING, ExtraFacing.WEST));
						else if(fromPos.equals(pos.north()) && validFacings.contains(ExtraFacing.EAST)) 
							worldIn.setBlockState(pos, state.withProperty(FACING, ExtraFacing.EAST));
						else if(fromPos.equals(pos.north()) && validFacings.contains(ExtraFacing.NORTH)) 
							worldIn.setBlockState(pos, state.withProperty(FACING, ExtraFacing.NORTH));
						break;
					case SOUTH_WEST:
						if(fromPos.equals(pos.east()) && validFacings.contains(ExtraFacing.SOUTH))
							worldIn.setBlockState(pos, state.withProperty(FACING, ExtraFacing.SOUTH));
						if(fromPos.equals(pos.north()) && validFacings.contains(ExtraFacing.WEST))
							worldIn.setBlockState(pos, state.withProperty(FACING, ExtraFacing.WEST));
						break;
					case SOUTH_EAST:
						if(fromPos.equals(pos.west()) && validFacings.contains(ExtraFacing.SOUTH))
							worldIn.setBlockState(pos, state.withProperty(FACING, ExtraFacing.SOUTH));
						if(fromPos.equals(pos.north()) && validFacings.contains(ExtraFacing.EAST))
							worldIn.setBlockState(pos, state.withProperty(FACING, ExtraFacing.EAST));
						break;
					case NORTH:
						if(fromPos.equals(pos.west()) && validFacings.contains(ExtraFacing.NORTH_EAST))
							worldIn.setBlockState(pos, state.withProperty(FACING, ExtraFacing.NORTH_EAST));
						if(fromPos.equals(pos.east()) && validFacings.contains(ExtraFacing.NORTH_WEST))
							worldIn.setBlockState(pos, state.withProperty(FACING, ExtraFacing.NORTH_WEST));
						if(fromPos.equals(pos.south()) && validFacings.contains(ExtraFacing.WEST))
							worldIn.setBlockState(pos, state.withProperty(FACING, ExtraFacing.WEST));
						else if(fromPos.equals(pos.south()) && validFacings.contains(ExtraFacing.EAST))
							worldIn.setBlockState(pos, state.withProperty(FACING, ExtraFacing.EAST));
						else if(fromPos.equals(pos.south()) && validFacings.contains(ExtraFacing.SOUTH)) 
							worldIn.setBlockState(pos, state.withProperty(FACING, ExtraFacing.SOUTH));
						break;
					case NORTH_WEST:
						if(fromPos.equals(pos.east()) && validFacings.contains(ExtraFacing.NORTH))
							worldIn.setBlockState(pos, state.withProperty(FACING, ExtraFacing.NORTH));
						if(fromPos.equals(pos.south()) && validFacings.contains(ExtraFacing.WEST))
							worldIn.setBlockState(pos, state.withProperty(FACING, ExtraFacing.WEST));
						break;
					case NORTH_EAST:
						if(fromPos.equals(pos.west()) && validFacings.contains(ExtraFacing.NORTH))
							worldIn.setBlockState(pos, state.withProperty(FACING, ExtraFacing.NORTH));
						if(fromPos.equals(pos.south()) && validFacings.contains(ExtraFacing.EAST))
							worldIn.setBlockState(pos, state.withProperty(FACING, ExtraFacing.EAST));
						break;
					case WEST:
						if(fromPos.equals(pos.south()) && validFacings.contains(ExtraFacing.NORTH_WEST))
							worldIn.setBlockState(pos, state.withProperty(FACING, ExtraFacing.NORTH_WEST));
						if(fromPos.equals(pos.north()) && validFacings.contains(ExtraFacing.SOUTH_WEST))
							worldIn.setBlockState(pos, state.withProperty(FACING, ExtraFacing.SOUTH_WEST));
						if(fromPos.equals(pos.east()) && validFacings.contains(ExtraFacing.NORTH))
							worldIn.setBlockState(pos, state.withProperty(FACING, ExtraFacing.NORTH));
						else if(fromPos.equals(pos.east()) && validFacings.contains(ExtraFacing.SOUTH))
							worldIn.setBlockState(pos, state.withProperty(FACING, ExtraFacing.SOUTH));
						else if(fromPos.equals(pos.east()) && validFacings.contains(ExtraFacing.EAST)) 
							worldIn.setBlockState(pos, state.withProperty(FACING, ExtraFacing.EAST));
						break;
					case EAST:
						if(fromPos.equals(pos.north()) && validFacings.contains(ExtraFacing.SOUTH_EAST))
							worldIn.setBlockState(pos, state.withProperty(FACING, ExtraFacing.SOUTH_EAST));
						if(fromPos.equals(pos.south()) && validFacings.contains(ExtraFacing.NORTH_EAST))
							worldIn.setBlockState(pos, state.withProperty(FACING, ExtraFacing.NORTH_EAST));
						if(fromPos.equals(pos.west()) && validFacings.contains(ExtraFacing.NORTH))
							worldIn.setBlockState(pos, state.withProperty(FACING, ExtraFacing.NORTH));
						else if(fromPos.equals(pos.west()) && validFacings.contains(ExtraFacing.SOUTH))
							worldIn.setBlockState(pos, state.withProperty(FACING, ExtraFacing.SOUTH));
						else if(fromPos.equals(pos.west()) && validFacings.contains(ExtraFacing.WEST)) 
							worldIn.setBlockState(pos, state.withProperty(FACING, ExtraFacing.WEST));
					default:
						break;
					}
		}
	}

    protected boolean onNeighborChangeInternal(World worldIn, BlockPos pos, IBlockState state)
    {
        if (!this.checkForDrop(worldIn, pos, state))
        {
            return true;
        }
        else
        {
            EnumFacing enumfacing = ModConfig.dynamicTorchesEnabled ? ((ExtraFacing)state.getValue(FACING)).getEnumFacing() 
            		: ((EnumFacing)state.getValue(FACING));
            EnumFacing.Axis enumfacing$axis = enumfacing.getAxis();
            EnumFacing enumfacing1 = enumfacing.getOpposite();
            BlockPos blockpos = pos.offset(enumfacing1);
            boolean flag = false;

            if (enumfacing$axis.isHorizontal() && worldIn.getBlockState(blockpos).getBlockFaceShape(worldIn, blockpos, enumfacing) != BlockFaceShape.SOLID)
            {
                flag = true;
            }
            else if (enumfacing$axis.isVertical() && !this.canPlaceOn(worldIn, blockpos))
            {
                flag = true;
            }

            if (flag)
            {
                this.dropBlockAsItem(worldIn, pos, state, 0);
                worldIn.setBlockToAir(pos);
                return true;
            }
            else
            {
                return false;
            }
        }
    }
	
	@Override
	public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn,
			EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ) {
		if(!worldIn.isRemote && ModConfig.dynamicTorchesEnabled) {			
			worldIn.setBlockState(pos, state.withProperty(FACING, getNextFacing(state, getValidExtraFacings(worldIn, pos))));
		}
		
		return true;
	}
	
	@Override
	protected BlockStateContainer createBlockState() {
		return new BlockStateContainer(this, new IProperty[] {FACING});
	}
	
	@Override
	public IBlockState getStateFromMeta(int meta) {
		if(!ModConfig.dynamicTorchesEnabled)
			return getDefaultState().withProperty(FACING, EnumFacing.VALUES[meta]);
		return getDefaultState().withProperty(FACING, ExtraFacing.fromMetadata(meta));
	}
	
	@Override
	public int getMetaFromState(IBlockState state) {
		if(!ModConfig.dynamicTorchesEnabled)
			return ((EnumFacing) state.getValue(FACING)).getIndex();
		return ((ExtraFacing) state.getValue(FACING)).getID();
	}
	
	@Override
	public IBlockState getStateForPlacement(World world, BlockPos pos, EnumFacing facing, float hitX, float hitY,
			float hitZ, int meta, EntityLivingBase placer, EnumHand hand) {
		if(!ModConfig.dynamicTorchesEnabled)
			return getStateForPlacementVanilla(world, pos, facing, hitX, hitY, hitZ, meta, placer, hand);
		return getStateForPlacementModded(world, pos, facing, hitX, hitY, hitZ, meta, placer, hand);
	}	
	
	private IBlockState getStateForPlacementVanilla(World world, BlockPos pos, EnumFacing facing, float hitX, float hitY,
			float hitZ, int meta, EntityLivingBase placer, EnumHand hand) {
		/*if (this.canPlaceAt(world, pos, facing))
        {
            return this.getDefaultState().withProperty(FACING, facing);
        }
        else
        {
            for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
            {
                if (this.canPlaceAt(world, pos, enumfacing))
                {
                    return this.getDefaultState().withProperty(FACING, enumfacing);
                }
            }

            return this.getDefaultState();
        }*/
		
				
		//if(getValidEnumFacings(world, pos).contains(ExtraFacing.fromMetadata(meta).getEnumFacing()))
		if(getValidEnumFacings(world, pos).contains(facing))
			return getDefaultState().withProperty(FACING, facing);
		
		return getDefaultState();
	}
	
	private IBlockState getStateForPlacementModded(World world, BlockPos pos, EnumFacing facing, float hitX, float hitY,
			float hitZ, int meta, EntityLivingBase placer, EnumHand hand) {
		IBlockState state = getDefaultState();
		ArrayList<ExtraFacing> validFacings = getValidExtraFacings(world, pos);
				
		switch(facing) {
			case EAST:
			{
				if(validFacings.contains(ExtraFacing.NORTH_EAST) && hitZ > 0.65)
					return state.withProperty(FACING, ExtraFacing.NORTH_EAST);
				else if(validFacings.contains(ExtraFacing.SOUTH_EAST) && hitZ < 0.35)
					return state.withProperty(FACING, ExtraFacing.SOUTH_EAST);
					return state.withProperty(FACING, ExtraFacing.EAST);
			}
			case WEST:
			{
				if(validFacings.contains(ExtraFacing.NORTH_WEST) && hitZ > 0.65)
					return state.withProperty(FACING, ExtraFacing.NORTH_WEST);
				else if(validFacings.contains(ExtraFacing.SOUTH_WEST) && hitZ < 0.35)
					return state.withProperty(FACING, ExtraFacing.SOUTH_WEST); 
				return state.withProperty(FACING, ExtraFacing.WEST);
			}
			case NORTH:
			{
				if(validFacings.contains(ExtraFacing.NORTH_EAST) && hitX < 0.35)
					return state.withProperty(FACING, ExtraFacing.NORTH_EAST);
				else if(validFacings.contains(ExtraFacing.NORTH_WEST) && hitX > 0.65)
					return state.withProperty(FACING, ExtraFacing.NORTH_WEST); 
				return state.withProperty(FACING, ExtraFacing.NORTH);
			}
			case SOUTH:
			{
				if(validFacings.contains(ExtraFacing.SOUTH_EAST) && hitX < 0.35)
					return state.withProperty(FACING, ExtraFacing.SOUTH_EAST);
				else if(validFacings.contains(ExtraFacing.SOUTH_WEST) && hitX > 0.65)
					return state.withProperty(FACING, ExtraFacing.SOUTH_WEST); 
				return state.withProperty(FACING, ExtraFacing.SOUTH);
			}
			default:
				return state.withProperty(FACING, ExtraFacing.UP);
		}		
	}

    protected boolean checkForDrop(World worldIn, BlockPos pos, IBlockState state)
    {
    	if(!ModConfig.dynamicTorchesEnabled)
    		return checkForDropVanilla(worldIn, pos, state);
    	return checkForDropModded(worldIn, pos, state);
    }
    
    private boolean checkForDropVanilla(World worldIn, BlockPos pos, IBlockState state) {
        if (state.getBlock() == this && this.canPlaceAtVanilla(worldIn, pos, (EnumFacing)state.getValue(FACING)))
        {
            return true;
        }
        else
        {
            if (worldIn.getBlockState(pos).getBlock() == this)
            {
                this.dropBlockAsItem(worldIn, pos, state, 0);
                worldIn.setBlockToAir(pos);
            }

            return false;
        }
    }
    
    private boolean checkForDropModded(World worldIn, BlockPos pos, IBlockState state) {
        if (state.getBlock() == this && this.canPlaceAtModded(worldIn, pos, (ExtraFacing)state.getValue(FACING)))
        {
            return true;
        }
        else
        {
            if (worldIn.getBlockState(pos).getBlock() == this)
            {
                this.dropBlockAsItem(worldIn, pos, state, 0);
                worldIn.setBlockToAir(pos);
            }

            return false;
        }
    }

    private boolean canPlaceOn(World worldIn, BlockPos pos)
    {
        IBlockState state = worldIn.getBlockState(pos);
        return state.getBlock().canPlaceTorchOnTop(state, worldIn, pos);
    }

    /**
     * Checks if this block can be placed exactly at the given position.
     */
    @Override
	public boolean canPlaceBlockAt(World worldIn, BlockPos pos)
    {
    	if(!ModConfig.dynamicTorchesEnabled)
    		return canPlaceBlockAtVanilla(worldIn, pos);
    	return canPlaceBlockAtModded(worldIn, pos);
    }
    
    private boolean canPlaceBlockAtVanilla(World worldIn, BlockPos pos) {
        for (EnumFacing enumfacing : getValidEnumFacings(worldIn, pos))
        {
            if (this.canPlaceAtVanilla(worldIn, pos, enumfacing))
            {
                return true;
            }
        }

        return false;
    }
    
    private boolean canPlaceBlockAtModded(World worldIn, BlockPos pos) {
        for (ExtraFacing extrafacing : getValidExtraFacings(worldIn, pos))
        {
            if (this.canPlaceAtModded(worldIn, pos, extrafacing))
            {
                return true;
            }
        }

        return false;
    }

    private boolean canPlaceAtVanilla(World worldIn, BlockPos pos, EnumFacing facing)
    {
        BlockPos blockpos = pos.offset(facing.getOpposite());
        IBlockState iblockstate = worldIn.getBlockState(blockpos);
        Block block = iblockstate.getBlock();
        BlockFaceShape blockfaceshape = iblockstate.getBlockFaceShape(worldIn, blockpos, facing);

        if (facing.equals(EnumFacing.UP) && this.canPlaceOn(worldIn, blockpos))
        {
            return true;
        }
        else if (facing != EnumFacing.UP && facing != EnumFacing.DOWN)
        {
            return !isExceptBlockForAttachWithPiston(block) && blockfaceshape == BlockFaceShape.SOLID;
        }
        else
        {
            return false;
        }
    }

    private boolean canPlaceAtModded(World worldIn, BlockPos pos, ExtraFacing facing)
    {
        BlockPos blockpos = pos.offset(facing.getOppositeEnumFacing());
        IBlockState iblockstate = worldIn.getBlockState(blockpos);
        Block block = iblockstate.getBlock();
        BlockFaceShape blockfaceshape = iblockstate.getBlockFaceShape(worldIn, blockpos, facing.getEnumFacing());

        if (facing.equals(ExtraFacing.UP) && this.canPlaceOn(worldIn, blockpos))
        {
            return true;
        }
        else if (facing != ExtraFacing.UP && facing != ExtraFacing.DOWN)
        {
            return !isExceptBlockForAttachWithPiston(block) && blockfaceshape == BlockFaceShape.SOLID;
        }
        else
        {
            return false;
        }
    }
    
    /**
     * Called after the block is set in the Chunk data, but before the Tile Entity is set
     */
    @Override
	public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state)
    {
        this.checkForDrop(worldIn, pos, state);
    }

    /**
     * Get the geometry of the queried face at the given position and state. This is used to decide whether things like
     * buttons are allowed to be placed on the face, or how glass panes connect to the face, among other things.
     * <p>
     * Common values are {@code SOLID}, which is the default, and {@code UNDEFINED}, which represents something that
     * does not fit the other descriptions and will generally cause other things not to connect to the face.
     * 
     * @return an approximation of the form of the given face
     */
    @Override
	public BlockFaceShape getBlockFaceShape(IBlockAccess worldIn, IBlockState state, BlockPos pos, EnumFacing face)
    {
        return BlockFaceShape.UNDEFINED;
    }

    @Override
	@SideOnly(Side.CLIENT)
    public void randomDisplayTick(IBlockState stateIn, World worldIn, BlockPos pos, Random rand)
    {
    	if(!ModConfig.dynamicTorchesEnabled)
    		randomTickDisplayVanilla(stateIn, worldIn, pos, rand);
    	else
    		randomTickDisplayModded(stateIn, worldIn, pos, rand);
    }
    
    private void randomTickDisplayVanilla(IBlockState stateIn, World worldIn, BlockPos pos, Random rand) {
        EnumFacing enumfacing = (EnumFacing) stateIn.getValue(FACING);
        double d0 = pos.getX() + 0.5D;
        double d1 = pos.getY() + 0.7D;
        double d2 = pos.getZ() + 0.5D;
        double d3 = 0.22D;
        double d4 = 0.27D;

        if (enumfacing.getAxis().isHorizontal())
        {
    		EnumFacing enumfacing1 = enumfacing.getOpposite();
    		worldIn.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, d0 + 0.27D * enumfacing1.getFrontOffsetX(), d1 + 0.22D, d2 + 0.27D * enumfacing1.getFrontOffsetZ(), 0.0D, 0.0D, 0.0D);
	        worldIn.spawnParticle(EnumParticleTypes.FLAME, d0 + 0.27D * enumfacing1.getFrontOffsetX(), d1 + 0.22D, d2 + 0.27D * enumfacing1.getFrontOffsetZ(), 0.0D, 0.0D, 0.0D);
        }
        else
        {
            worldIn.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, d0, d1, d2, 0.0D, 0.0D, 0.0D);
            worldIn.spawnParticle(EnumParticleTypes.FLAME, d0, d1, d2, 0.0D, 0.0D, 0.0D);
        }
    }
    
    private void randomTickDisplayModded(IBlockState stateIn, World worldIn, BlockPos pos, Random rand) {
    	ExtraFacing extrafacing = (ExtraFacing) stateIn.getValue(FACING);
        EnumFacing enumfacing = extrafacing.getEnumFacing();
        double d0 = pos.getX() + 0.5D;
        double d1 = pos.getY() + 0.7D;
        double d2 = pos.getZ() + 0.5D;
        double d3 = 0.22D;
        double d4 = 0.27D;

        if (enumfacing.getAxis().isHorizontal())
        {
    		ExtraFacing extrafacing1 = extrafacing.getOppositeExtraFacing();
    		worldIn.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, d0 + 0.27D * extrafacing1.getFrontOffsetX(), d1 + 0.22D, d2 + 0.27D * extrafacing1.getFrontOffsetZ(), 0.0D, 0.0D, 0.0D);
	        worldIn.spawnParticle(EnumParticleTypes.FLAME, d0 + 0.27D * extrafacing1.getFrontOffsetX(), d1 + 0.22D, d2 + 0.27D * extrafacing1.getFrontOffsetZ(), 0.0D, 0.0D, 0.0D);
        }
        else
        {
            worldIn.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, d0, d1, d2, 0.0D, 0.0D, 0.0D);
            worldIn.spawnParticle(EnumParticleTypes.FLAME, d0, d1, d2, 0.0D, 0.0D, 0.0D);
        }
    }
	
	private ArrayList<ExtraFacing> getValidExtraFacings(World worldIn, BlockPos pos) {
		boolean hasEast, hasWest, hasNorth, hasSouth, hasBottom;
		
		hasEast = worldIn.getBlockState(pos.east()).isSideSolid(worldIn, pos.east(), EnumFacing.WEST);
		hasWest = worldIn.getBlockState(pos.west()).isSideSolid(worldIn, pos.west(), EnumFacing.EAST);
		hasNorth = worldIn.getBlockState(pos.north()).isSideSolid(worldIn, pos.north(), EnumFacing.SOUTH);
		hasSouth = worldIn.getBlockState(pos.south()).isSideSolid(worldIn, pos.south(), EnumFacing.NORTH);
		hasBottom = worldIn.getBlockState(pos.down()).isSideSolid(worldIn, pos.down(), EnumFacing.UP);
		
		return getValidExtraFacingsInternal(hasEast, hasWest, hasNorth, hasSouth, hasBottom);
	}
	
	private ArrayList<ExtraFacing> getValidExtraFacings(ArrayList<EnumFacing> validEnumFacings) {
		boolean hasEast, hasWest, hasNorth, hasSouth, hasBottom;
		
		hasEast = validEnumFacings.contains(EnumFacing.EAST);
		hasWest = validEnumFacings.contains(EnumFacing.WEST);
		hasNorth = validEnumFacings.contains(EnumFacing.NORTH);
		hasSouth = validEnumFacings.contains(EnumFacing.SOUTH);
		hasBottom = validEnumFacings.contains(EnumFacing.UP);
			
		return getValidExtraFacingsInternal(hasEast, hasWest, hasNorth, hasSouth, hasBottom);
	}
	
	//TODO: change parameters to array?
	private ArrayList<ExtraFacing> getValidExtraFacingsInternal(boolean hasEast, boolean hasWest, boolean hasNorth, boolean hasSouth, boolean hasBottom) {
		ArrayList<ExtraFacing> validFacings = new ArrayList<ExtraFacing>();
		
		validFacings.add(ExtraFacing.UP);
		validFacings.add(ExtraFacing.NORTH);
		validFacings.add(ExtraFacing.NORTH_EAST);
		validFacings.add(ExtraFacing.EAST);
		validFacings.add(ExtraFacing.SOUTH_EAST);
		validFacings.add(ExtraFacing.SOUTH);
		validFacings.add(ExtraFacing.SOUTH_WEST);
		validFacings.add(ExtraFacing.WEST);
		validFacings.add(ExtraFacing.NORTH_WEST);

		if(!hasBottom)
			validFacings.remove(ExtraFacing.UP);
		
		if(!hasSouth) {
			validFacings.remove(ExtraFacing.NORTH);
			validFacings.remove(ExtraFacing.NORTH_EAST);
			validFacings.remove(ExtraFacing.NORTH_WEST);
		}
		
		if(!hasWest) {
			validFacings.remove(ExtraFacing.EAST);
			validFacings.remove(ExtraFacing.SOUTH_EAST);
			validFacings.remove(ExtraFacing.NORTH_EAST);
		}		
		
		if(!hasNorth) {
			validFacings.remove(ExtraFacing.SOUTH);
			validFacings.remove(ExtraFacing.SOUTH_WEST);
			validFacings.remove(ExtraFacing.SOUTH_EAST);
		}		
		
		if(!hasEast) {
			validFacings.remove(ExtraFacing.WEST);
			validFacings.remove(ExtraFacing.NORTH_WEST);
			validFacings.remove(ExtraFacing.SOUTH_WEST);
		}
		
		if(ModConfig.isCleanUp) {
			validFacings.remove(ExtraFacing.NORTH_WEST);
			validFacings.remove(ExtraFacing.NORTH_EAST);
			validFacings.remove(ExtraFacing.SOUTH_WEST);
			validFacings.remove(ExtraFacing.SOUTH_EAST);
		}
		
		return validFacings;
	}
	
	private ExtraFacing getNextFacing(IBlockState state, ArrayList<ExtraFacing> validFacings) {
		ExtraFacing nextFacing = ExtraFacing.UP;
		int currentFacingIndex = validFacings.indexOf(state.getValue(FACING));
		
		if(currentFacingIndex < validFacings.size()-1)
			nextFacing = validFacings.get(currentFacingIndex + 1);
		else
			nextFacing = validFacings.get(0);
		
		return nextFacing;
	}
	
	private ArrayList<EnumFacing> getValidEnumFacings(World worldIn, BlockPos pos) {
		ArrayList<EnumFacing> validFacings = new ArrayList<EnumFacing>();

		if(worldIn.getBlockState(pos.east()).isSideSolid(worldIn, pos.east(), EnumFacing.WEST))
			validFacings.add(EnumFacing.WEST);
		if(worldIn.getBlockState(pos.west()).isSideSolid(worldIn, pos.west(), EnumFacing.EAST))
			validFacings.add(EnumFacing.EAST);
		if(worldIn.getBlockState(pos.north()).isSideSolid(worldIn, pos.north(), EnumFacing.SOUTH))
			validFacings.add(EnumFacing.SOUTH);
		if(worldIn.getBlockState(pos.south()).isSideSolid(worldIn, pos.south(), EnumFacing.NORTH))
			validFacings.add(EnumFacing.NORTH);
		if(worldIn.getBlockState(pos.down()).isSideSolid(worldIn, pos.down(), EnumFacing.UP))
			validFacings.add(EnumFacing.UP);
		
		return validFacings;
	}
	
	private ArrayList<EnumFacing> getValidEnumFacings(ArrayList<ExtraFacing> validExtraFacings) {
		ArrayList<EnumFacing> validFacings = new ArrayList<EnumFacing>();

		for(ExtraFacing extraFacing : validExtraFacings)
			if(!extraFacing.isDiagonal())
				validFacings.add(extraFacing.getEnumFacing());
		
		return validFacings;
	}
}
